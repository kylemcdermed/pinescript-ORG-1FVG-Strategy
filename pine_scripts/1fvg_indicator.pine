//@version=5 
strategy("NQ1! 1m Liquidity + 1FVG Strategy", overlay=true, margin_long=100, margin_short=100)

//------------------------------------------------------------------------------
//BUY SIDE AND SELL SIDE LIQUIDITY CODE BELOW 
//-----------------------------------------------------------------------------{

//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
liqGrp = 'Liquidity Detection'
liqLen = input.int   (7, title = 'Detection Length', minval = 3, maxval = 13, inline = 'LIQ', group = liqGrp)
liqMar = 10 / input.float (6.9, 'Margin', minval = 4, maxval = 9, step = 0.1, inline = 'LIQ', group = liqGrp)

liqBuy = input.bool (true, 'Buyside Liquidity Zones, Margin', inline = 'Buyside', group = liqGrp)
marBuy    = input.float(2.3, '', minval = 1.5, maxval = 10, step = .1, inline = 'Buyside', group = liqGrp)
cLIQ_B = input.color (color.new(#4934eb,  0), '', inline = 'Buyside', group = liqGrp)

liqSel = input.bool (true, 'Sellside Liquidity Zones, Margin', inline = 'Sellside', group = liqGrp)
marSel = input.float(2.3, '', minval = 1.5, maxval = 10, step = .1, inline = 'Sellside', group = liqGrp)
cLIQ_S = input.color (color.new(#eb3434,  0), '', inline = 'Sellside', group = liqGrp)

lqVoid = input.bool (false, 'Liquidity Voids, Bullish', inline = 'void', group = liqGrp)
cLQV_B = input.color (color.new(#4934eb,  0), '', inline = 'void', group = liqGrp)
cLQV_S = input.color (color.new(#eb3434,  0), 'Bearish', inline = 'void', group = liqGrp)
lqText = input.bool (false, 'Label', inline = 'void', group = liqGrp)

mode   = input.string('Historical', title = 'Mode', options =['Present', 'Historical'], inline = 'MOD', group = liqGrp)
visLiq = input.int   (50, '    # Visible Levels', minval = 1, maxval = 200, inline = 'MOD', group = liqGrp)

//-----------------------------------------------------------------------------}
//General Calculations
//-----------------------------------------------------------------------------{
maxSize = 500 // Increased to store more liquidity levels for 1m timeframe 
atr     = ta.atr(10)
atr200  = ta.atr(200)
// only draw liquidity levels (remove time restriction to keep them visible)
per     = true  // Always show liquidity levels

//-----------------------------------------------------------------------------}
//User Defined Types
//-----------------------------------------------------------------------------{
type ZZ 
    int   [] d // tracks DIRECTION at each pivot 
    int   [] x // bar index based on TIME on chart 
    float [] y // stores the PRICE at each pivot 

type bar
    float o = open
    float h = high
    float l = low
    float c = close
    int   i = bar_index

type liq
    box   bx 
    box   bxz
    box   bxt
    bool  brZ 
    bool  brL // liquidity level broken
    line  ln
    line  lne

//-----------------------------------------------------------------------------}
//Variables
//-----------------------------------------------------------------------------{
var ZZ aZZ = ZZ.new(
 array.new <int>  (maxSize,  0), 
 array.new <int>  (maxSize,  0), 
 array.new <float>(maxSize, na)
 )

bar b = bar.new()

var liq[] b_liq_B = array.new<liq> (1, liq.new(box(na), box(na), box(na), false, false, line(na), line(na)))
var liq[] b_liq_S = array.new<liq> (1, liq.new(box(na), box(na), box(na), false, false, line(na), line(na)))

var b_liq_V = array.new_box()

var int dir = na, var int x1 = na, var float y1 = na, var int x2 = na, var float y2 = na

//-----------------------------------------------------------------------------}
//Functions/methods
//-----------------------------------------------------------------------------{
method in_out(ZZ aZZ, int _d, int _x, float _y) =>
    aZZ.d.unshift(_d), aZZ.x.unshift(_x), aZZ.y.unshift(_y), aZZ.d.pop(), aZZ.x.pop(), aZZ.y.pop()

// Re-add max_bars_back with higher limit for 1m timeframe
max_bars_back(time, 5000)

//-----------------------------------------------------------------------------}
//Liquidity Calculations
//-----------------------------------------------------------------------------{
x2 := b.i - 1 
ph  = ta.pivothigh(liqLen, 1) 
pl  = ta.pivotlow (liqLen, 1) 

if ph   
    dir := aZZ.d.get(0) 
    x1  := aZZ.x.get(0) 
    y1  := aZZ.y.get(0) 
    y2  := nz(b.h[1]) 

    if dir < 1 
        aZZ.in_out(1, x2, y2)
    else 
        if dir == 1 and ph > y1 
            aZZ.x.set(0, x2), aZZ.y.set(0, y2)
    
    if per
        count = 0 
        st_P  = 0. 
        st_B  = 0 
        minP  = 0. 
        maxP  = 10e6 

        for i = 0 to maxSize - 1
            if aZZ.d.get(i) ==  1 
                if aZZ.y.get(i) > ph + (atr / liqMar)
                    break
                else
                    if aZZ.y.get(i) > ph - (atr / liqMar) and aZZ.y.get(i) < ph + (atr / liqMar)
                        count += 1
                        st_B := aZZ.x.get(i) 
                        st_P := aZZ.y.get(i) 
                        if aZZ.y.get(i) > minP
                            minP := aZZ.y.get(i)
                        if aZZ.y.get(i) < maxP 
                            maxP := aZZ.y.get(i)

        if count > 2
            getB = b_liq_B.get(0)

            if st_B == getB.bx.get_left()
                getB.bx.set_top(math.avg(minP, maxP) + (atr / liqMar))
                getB.bx.set_rightbottom(b.i + 10, math.avg(minP, maxP) - (atr / liqMar))
            else
                b_liq_B.unshift(
                 liq.new(
                   box.new(st_B, math.avg(minP, maxP) + (atr / liqMar), b.i + 10, math.avg(minP, maxP) - (atr / liqMar), bgcolor=color(na), border_color=color(na)), 
                   box.new(na, na, na, na, bgcolor = color(na), border_color = color(na)),
                   box.new(st_B, st_P, b.i + 10, st_P, text = 'Buyside liquidity', text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_bottom, text_color = color.new(cLIQ_B, 25), bgcolor = color(na), border_color = color(na)),
                   false, 
                   false,
                   line.new(st_B   , st_P, bar_index + 50, st_P, color = color.new(cLIQ_B, 0)),
                   line.new(bar_index, st_P, bar_index + 200, st_P, color = color.new(cLIQ_B, 0), style = line.style_dotted))
                 )

            if b_liq_B.size() > visLiq
                getLast = b_liq_B.pop()
                getLast.bx.delete()
                getLast.bxz.delete()
                getLast.bxt.delete()
                getLast.ln.delete()
                getLast.lne.delete()               

if pl
    dir := aZZ.d.get (0)  
    x1  := aZZ.x.get (0) 
    y1  := aZZ.y.get (0)  
    y2  := nz(b.l[1]) 
    
    if dir > -1
        aZZ.in_out(-1, x2, y2)
    else
        if dir == -1 and pl < y1 
            aZZ.x.set(0, x2), aZZ.y.set(0, y2)
    
    if per
        count = 0
        st_P  = 0.
        st_B  = 0
        minP  = 0.
        maxP  = 10e6

        for i = 0 to maxSize - 1
            if aZZ.d.get(i) == -1 
                if aZZ.y.get(i) < pl - (atr / liqMar)
                    break
                else
                    if aZZ.y.get(i) > pl - (atr / liqMar) and aZZ.y.get(i) < pl + (atr / liqMar)
                        count += 1
                        st_B := aZZ.x.get(i)
                        st_P := aZZ.y.get(i)
                        if aZZ.y.get(i) > minP
                            minP := aZZ.y.get(i)
                        if aZZ.y.get(i) < maxP 
                            maxP := aZZ.y.get(i)

        if count > 2
            getB = b_liq_S.get(0)

            if st_B == getB.bx.get_left()
                getB.bx.set_top(math.avg(minP, maxP) + (atr / liqMar))
                getB.bx.set_rightbottom(b.i + 10, math.avg(minP, maxP) - (atr / liqMar))
            else
                b_liq_S.unshift(
                 liq.new(
                   box.new(st_B, math.avg(minP, maxP) + (atr / liqMar), b.i + 10, math.avg(minP, maxP) - (atr / liqMar), bgcolor=color(na), border_color=color(na)),
                   box.new(na, na, na, na, bgcolor=color(na), border_color=color(na)),
                   box.new(st_B, st_P, b.i + 10, st_P, text = 'Sellside liquidity', text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_top, text_color = color.new(cLIQ_S, 25), bgcolor=color(na), border_color=color(na)),
                   false,
                   false,
                   line.new(st_B   , st_P, bar_index + 50, st_P, color = color.new(cLIQ_S, 0)),
                   line.new(bar_index, st_P, bar_index + 200, st_P, color = color.new(cLIQ_S, 0), style = line.style_dotted))
                 )  

            if b_liq_S.size() > visLiq
                getLast = b_liq_S.pop()
                getLast.bx.delete()
                getLast.bxz.delete()
                getLast.bxt.delete()
                getLast.ln.delete()            
                getLast.lne.delete()               

// Update liquidity breach tracking
for i = 0 to b_liq_B.size() - 1
    x = b_liq_B.get(i)
    
    if not x.brL
        x.lne.set_x2(b.i)

        if b.h > x.bx.get_top()
            x.brL := true
            x.brZ := true

            x.bxz.set_lefttop(b.i - 1, math.min(x.ln.get_y1() + marBuy * (atr), b.h))
            x.bxz.set_rightbottom(b.i + 1, x.ln.get_y1())
            x.bxz.set_bgcolor(color.new(cLIQ_B, liqBuy ? 73 : 100))

    else if x.brZ
        if b.l > x.ln.get_y1() - marBuy * (atr) and b.h < x.ln.get_y1() + marBuy * (atr)
            x.bxz.set_right(b.i + 1)
            x.bxz.set_top(math.max(b.h, x.bxz.get_top()))
            if liqBuy
                x.lne.set_x2(b.i + 1)
        else
            x.brZ := false

for i = 0 to b_liq_S.size() - 1
    x = b_liq_S.get(i)

    if not x.brL
        x.lne.set_x2(b.i)

        if b.l < x.bx.get_bottom()
            x.brL := true
            x.brZ := true

            x.bxz.set_lefttop(b.i - 1, x.ln.get_y1())
            x.bxz.set_rightbottom(b.i + 1, math.max(x.ln.get_y1() - marSel * (atr), b.l))
            x.bxz.set_bgcolor(color.new(cLIQ_S, liqSel ? 73 : 100))

    else if x.brZ
        if b.l > x.ln.get_y1() - marSel * (atr) and b.h < x.ln.get_y1() + marSel * (atr)
            x.bxz.set_rightbottom(b.i + 1, math.min(b.l, x.bxz.get_bottom()))
            if liqSel
                x.lne.set_x2(b.i + 1)
        else
            x.brZ := false

//------------------------------------------------------------------------------
//1FVG DETECTION CODE
//-----------------------------------------------------------------------------{

// Function to detect 1FVG
get1mFVG() =>
    float fvg_top = na
    float fvg_bottom = na
    float fvg_high_c1 = na
    float fvg_low_c1 = na
    float fvg_high_c3 = na
    float fvg_low_c3 = na
    bool is_bullish_fvg = false
    bool is_bearish_fvg = false
    
    // Check for bullish FVG (gap up) - candle 1 low > candle 3 high
    if low > high[2]
        is_bullish_fvg := true
        fvg_bottom := high[2]  // Bottom of gap
        fvg_top := low         // Top of gap
        fvg_high_c1 := high    // Candle 1 wick high
        fvg_low_c1 := low      // Candle 1 wick low  
        fvg_high_c3 := high[2] // Candle 3 wick high
        fvg_low_c3 := low[2]   // Candle 3 wick low
    
    // Check for bearish FVG (gap down) - candle 1 high < candle 3 low
    if high < low[2]
        is_bearish_fvg := true
        fvg_top := low[2]      // Top of gap
        fvg_bottom := high     // Bottom of gap
        fvg_high_c1 := high    // Candle 1 wick high
        fvg_low_c1 := low      // Candle 1 wick low
        fvg_high_c3 := high[2] // Candle 3 wick high
        fvg_low_c3 := low[2]   // Candle 3 wick low
    
    [fvg_top, fvg_bottom, fvg_high_c1, fvg_low_c1, fvg_high_c3, fvg_low_c3, is_bullish_fvg, is_bearish_fvg]

// Draw 1FVG levels
var line fvg_top_line = na
var line fvg_bottom_line = na
var line fvg_ce_line = na
var box fvg_box = na

//------------------------------------------------------------------------------
//TRADING LOGIC
//-----------------------------------------------------------------------------{

// Trading session management - optimized for 1-minute timeframe
is_market_session = time(timeframe.period, "0930-1615", "America/New_York")
is_after_930 = hour(time, "America/New_York") >= 9 and minute(time, "America/New_York") >= 30
session_change = ta.change(time("D"))

// Session reset variables
var bool session_started = false
var bool first_fvg_found = false
var bool sellside_swept_first = false
var bool buyside_swept_first = false
var bool looking_for_long = false
var bool looking_for_short = false

// 1FVG variables
var float first_fvg_top = na
var float first_fvg_bottom = na
var float first_fvg_c1_high = na
var float first_fvg_c1_low = na  
var float first_fvg_c3_high = na
var float first_fvg_c3_low = na
var bool first_fvg_bullish = false

// Session management - reset on new day
if session_change
    session_started := false
    first_fvg_found := false
    sellside_swept_first := false
    buyside_swept_first := false
    looking_for_long := false
    looking_for_short := false
    first_fvg_top := na
    first_fvg_bottom := na
    first_fvg_c1_high := na
    first_fvg_c1_low := na
    first_fvg_c3_high := na
    first_fvg_c3_low := na
    first_fvg_bullish := false

// Start session tracking
if is_market_session and not session_started
    session_started := true

// Detect first FVG of the session
if session_started and not first_fvg_found and is_after_930
    [fvg_top, fvg_bottom, c1_high, c1_low, c3_high, c3_low, is_bull, is_bear] = get1mFVG()
    
    if not na(fvg_top) and not na(fvg_bottom)
        first_fvg_found := true
        first_fvg_top := fvg_top
        first_fvg_bottom := fvg_bottom
        first_fvg_c1_high := c1_high
        first_fvg_c1_low := c1_low
        first_fvg_c3_high := c3_high
        first_fvg_c3_low := c3_low
        first_fvg_bullish := is_bull
        
        // Draw the FVG - extended further for 1m timeframe
        fvg_top_line := line.new(bar_index, fvg_top, bar_index + 200, fvg_top, color=color.green, width=2, style=line.style_solid)
        fvg_bottom_line := line.new(bar_index, fvg_bottom, bar_index + 200, fvg_bottom, color=color.red, width=2, style=line.style_solid)
        fvg_ce_line := line.new(bar_index, (fvg_top + fvg_bottom)/2, bar_index + 200, (fvg_top + fvg_bottom)/2, color=color.yellow, width=1, style=line.style_dashed)
        fvg_box := box.new(bar_index, fvg_top, bar_index + 200, fvg_bottom, bgcolor=color.new(color.blue, 90), border_color=color.blue)
        
        // Debug: FVG found label
        label.new(bar_index, math.avg(fvg_top, fvg_bottom), "1FVG FOUND\nBull: " + str.tostring(is_bull) + "\nBear: " + str.tostring(is_bear), 
                 style=label.style_label_left, color=color.blue, textcolor=color.white, size=size.normal)

// Update FVG lines - extended for 1m timeframe
if not na(fvg_top_line)
    line.set_x2(fvg_top_line, bar_index + 50)
    line.set_x2(fvg_bottom_line, bar_index + 50)
    line.set_x2(fvg_ce_line, bar_index + 50)
    box.set_right(fvg_box, bar_index + 50)

// Debug labels to check if liquidity and FVG detection is working
if session_started and is_after_930
    // Debug: Show session status
    if barstate.islast
        label.new(bar_index, high, "Session Active\nLooking for liquidity sweeps", 
                 style=label.style_label_down, color=color.gray, textcolor=color.white, size=size.small)

// Check for liquidity sweeps - improved detection
sellside_swept_this_bar = false
buyside_swept_this_bar = false

// Always check for liquidity sweeps after 9:30, even if FVG isn't found yet
if session_started and is_after_930 and not sellside_swept_first and not buyside_swept_first
    
    // Check for sellside liquidity sweep - look for any breached levels
    if b_liq_S.size() > 0
        for i = 0 to b_liq_S.size() - 1
            liq_level = b_liq_S.get(i)
            // Check if liquidity was breached
            if liq_level.brL
                sellside_swept_this_bar := true
                break
    
    // Check for buyside liquidity sweep - look for any breached levels
    if b_liq_B.size() > 0
        for i = 0 to b_liq_B.size() - 1
            liq_level = b_liq_B.get(i)
            // Check if liquidity was breached
            if liq_level.brL
                buyside_swept_this_bar := true
                break
    
    // Determine trade direction based on first sweep detected
    if sellside_swept_this_bar and not sellside_swept_first and not buyside_swept_first
        sellside_swept_first := true
        looking_for_long := true
        // Debug: Sellside swept label
        label.new(bar_index, low, "SELLSIDE SWEPT\nLooking for LONG", 
                 style=label.style_label_up, color=color.orange, textcolor=color.white, size=size.normal)
        
    if buyside_swept_this_bar and not buyside_swept_first and not sellside_swept_first
        buyside_swept_first := true
        looking_for_short := true
        // Debug: Buyside swept label
        label.new(bar_index, high, "BUYSIDE SWEPT\nLooking for SHORT", 
                 style=label.style_label_down, color=color.orange, textcolor=color.white, size=size.normal)

// DISCOUNT ENTRY LOGIC (Long after sellside sweep)
if looking_for_long and first_fvg_found and strategy.position_size == 0
    // UPDATED: Trigger is close above candle 1 wick low, Stop is candle 3 wick low explicitly
    trigger_price = first_fvg_c1_low  // Trigger: close above candle 1 wick low
    entry_price = first_fvg_c1_low    // Entry: limit at candle 1 wick low  
    stop_price = first_fvg_c3_low     // Stop: candle 3 wick low (no buffer)
    
    if close > trigger_price and entry_price > stop_price
        strategy.entry("Long", strategy.long, limit=entry_price, comment="Discount Entry")
        strategy.exit("Long Exit", "Long", stop=stop_price, comment="Long SL")
        // Add visual confirmation
        label.new(bar_index, low, "LONG ENTRY TRIGGERED\nTrigger: " + str.tostring(trigger_price) + "\nEntry: " + str.tostring(entry_price) + "\nStop: " + str.tostring(stop_price), 
                 style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal)

// PREMIUM ENTRY LOGIC (Short after buyside sweep)  
if looking_for_short and first_fvg_found and strategy.position_size == 0
    // UPDATED: Trigger is close below candle 3 wick high, Stop is candle 1 wick high explicitly
    trigger_price = first_fvg_c3_high // Trigger: close below candle 3 wick high
    entry_price = first_fvg_c3_high   // Entry: limit at candle 3 wick high
    stop_price = first_fvg_c1_high    // Stop: candle 1 wick high (no buffer)
    
    if close < trigger_price and entry_price < stop_price
        strategy.entry("Short", strategy.short, limit=entry_price, comment="Premium Entry")
        strategy.exit("Short Exit", "Short", stop=stop_price, comment="Short SL")
        // Add visual confirmation
        label.new(bar_index, high, "SHORT ENTRY TRIGGERED\nTrigger: " + str.tostring(trigger_price) + "\nEntry: " + str.tostring(entry_price) + "\nStop: " + str.tostring(stop_price), 
                 style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal)

// PROFIT TAKING LOGIC - Take profit at opposing liquidity levels
var bool long_profit_taken = false
var bool short_profit_taken = false

// Check for profit taking on long positions
if strategy.position_size > 0 and not long_profit_taken
    // Look for buyside liquidity hit for profit taking
    if b_liq_B.size() > 0
        for i = 0 to b_liq_B.size() - 1
            liq_level = b_liq_B.get(i)
            // Check if price reached buyside liquidity level
            if high >= liq_level.ln.get_y1()
                strategy.close("Long", comment="Profit at Buyside Liquidity")
                long_profit_taken := true
                label.new(bar_index, high, "PROFIT TAKEN\nBuyside Liquidity Hit", 
                         style=label.style_label_down, color=color.blue, textcolor=color.white, size=size.normal)
                break

// Check for profit taking on short positions  
if strategy.position_size < 0 and not short_profit_taken
    // Look for sellside liquidity hit for profit taking
    if b_liq_S.size() > 0
        for i = 0 to b_liq_S.size() - 1
            liq_level = b_liq_S.get(i)
            // Check if price reached sellside liquidity level
            if low <= liq_level.ln.get_y1()
                strategy.close("Short", comment="Profit at Sellside Liquidity")
                short_profit_taken := true
                label.new(bar_index, low, "PROFIT TAKEN\nSellside Liquidity Hit", 
                         style=label.style_label_up, color=color.blue, textcolor=color.white, size=size.normal)
                break

// Reset profit flags when no position
if strategy.position_size == 0
    long_profit_taken := false
    short_profit_taken := false
